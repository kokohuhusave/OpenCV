✅ 코드해석

    이 코드는 Python에서 OpenCV와 Matplotlib을 사용하여 이미지를 로드하고 필터링하는 간단한 예제입니다. 코드는 다음과 같이 구성됩니다:

    1. `import` 문을 사용하여 필요한 라이브러리를 가져옵니다.
    2. `cv2.imread('./dog.bmp')`: 'dog.bmp' 파일을 읽어서 이미지 데이터를 `img` 변수에 저장합니다. 해당 이미지는 현재 작업 디렉토리에서 찾아집니다.
    3. `cv2.cvtColor(img, cv2.COLOR_BGR2RGB)`: `img`의 색상을 BGR에서 RGB로 변환하여 `dst1`에 저장합니다. OpenCV는 기본적으로 BGR 색상 순서를 사용하지만,
    일반적으로 Matplotlib과 같은 다른 라이브러리는 RGB 색상 순서를 사용하므로 변환해야 합니다.
    4. `cv2.blur(img, (3, 3))`: `img`를 블러(흐림) 처리하여 `dst2`에 저장합니다. 이는 커널의 크기가 (3, 3)인 평균 블러를 수행합니다.
    5. Matplotlib를 사용하여 이미지를 시각화합니다.
       - `plt.figure(figsize=(10, 5))`: 새로운 Matplotlib 그림을 생성하고 크기를 설정합니다.
       - `for i, k in enumerate([3, 5, 9]):`: 커널 크기가 3, 5, 9인 3가지 필터링 결과를 시각화합니다.
         - `kernel = np.ones((k, k)) / k ** 2`: 크기가 (k, k)인 필터 커널을 생성합니다. 이 예제에서는 평균 필터를 사용합니다.
         - `filtering = cv2.filter2D(dst1, -1, kernel)`: `dst1` 이미지에 커널을 적용하여 필터링한 결과를 `filtering` 변수에 저장합니다.
         - `plt.subplot(1, 3, i+1)`: 현재 그림의 위치를 설정합니다. 1행 3열의 서브플롯 중 i+1 번째를 선택합니다.
         - `plt.imshow(filtering)`: `filtering` 이미지를 시각화합니다.
         - `plt.title('kernel size:{}'.format(k))`: 서브플롯의 제목을 지정합니다.
         - `plt.axis('off')`: 축을 보이지 않도록 설정합니다.
    6. `plt.show()`: Matplotlib로 그린 모든 그림을 표시합니다.

    7. `cv2.waitKey()`: `cv2.imshow()` 함수로 보여진 이미지들이 화면에서 유지되도록 기다립니다. 아무 키나 누를 때까지 기다립니다.

    코드를 실행하면 이미지가 먼저 OpenCV 창에 표시되고, 그 다음 Matplotlib 창에 필터링된 결과가 표시될 것입니다. 필터링 결과는 커널 크기에 따라서 다르게 나타날 것입니다.



✅ 결과해석

    이 코드는 주어진 'dog.bmp' 이미지를 불러와서 두 가지 방법으로 필터링하여 결과를 시각화하는 예제입니다. 첫 번째로는 OpenCV를 사용하여 이미지를 블러 처리하고(`cv2.blur`), 두 번째로는 Matplotlib와 NumPy를 사용하여 커널 크기가 3, 5, 9인 평균 필터를 적용하여 이미지를 필터링합니다. 결과를 보면 이미지의 흐림 정도가 커널 크기에 따라 달라지는 것을 확인할 수 있습니다.

    1. `cv2.blur`를 사용하여 이미지를 블러 처리한 결과:
       - `dst2 = cv2.blur(img, (3, 3))`: (3, 3) 크기의 평균 필터를 적용하여 이미지를 블러 처리합니다. 평균 필터는 커널 내 모든 픽셀의 평균 값을 중심 픽셀의 값으로 설정하여 흐림 효과를 주는 필터입니다.

    2. Matplotlib와 NumPy를 사용하여 평균 필터를 적용한 결과:
       - `for i, k in enumerate([3, 5, 9]):`: 커널 크기가 3, 5, 9인 평균 필터를 순차적으로 적용합니다.
       - `kernel = np.ones((k, k)) / k ** 2`: 크기가 (k, k)인 2차원 배열을 생성하고, 모든 요소를 1로 초기화한 후 k ** 2로 나눠주어 평균 필터 커널을 생성합니다.
       - `filtering = cv2.filter2D(dst1, -1, kernel)`: `dst1` 이미지에 커널을 적용하여 평균 필터링한 결과를 `filtering` 변수에 저장합니다.
       - `plt.imshow(filtering)`: Matplotlib를 사용하여 `filtering` 이미지를 시각화합니다.

    코드의 실행 결과를 해석하면:

    1. OpenCV를 사용하여 블러 처리한 결과 (`dst2`):
       - `dst2`에는 원본 이미지인 `img`에 (3, 3) 크기의 평균 필터를 적용하여 얻은 블러 처리된 이미지가 저장됩니다.
       - 이 결과는 이미지가 흐릿하고 부드럽게 보이는 효과를 줍니다. 따라서 이미지의 세부 사항이 흐려지고 경계가 부드러워집니다.

    2. Matplotlib와 NumPy를 사용하여 평균 필터를 적용한 결과:
       - 각 커널 크기(3, 5, 9)에 대해 평균 필터를 적용하여 이미지를 필터링한 결과가 시각화됩니다.
       - 커널 크기가 커질수록 이미지의 흐림 정도가 더욱 강해지는 것을 볼 수 있습니다. 이는 평균 필터의 크기가 커질수록 주변 픽셀들의 영향을 더 많이 받아 흐려지는 효과가 증가하기 때문입니다.
       - `kernel size: 3`: 상대적으로 세밀한 블러 효과를 가지고 있습니다.
       - `kernel size: 5`: 블러 효과가 강해지고 이미지의 세부 사항이 흐려집니다.
       - `kernel size: 9`: 가장 강한 블러 효과로 이미지의 경계가 더욱 부드러워집니다.

    이러한 결과들을 통해 다양한 필터 크기가 이미지에 어떤 영향을 미치는지 이해할 수 있습니다. 필터링은 영상 처리에서 많이 사용되며, 커널의 크기와 형태에 따라 이미지를 부드럽게 하거나 경계를 강조하는 등 다양한 효과를 적용할 수 있습니다.

