✅ 코드해석 및 결과해석

이 코드는 OpenCV를 사용하여 'gaussian_noise.jpg' 이미지를 로드하고 가우시안 블러와 바이레터럴 필터를 적용하여 결과를 출력하는 예제입니다.

1. `cv2.imread('./gaussian_noise.jpg', cv2.IMREAD_GRAYSCALE)`: 'gaussian_noise.jpg' 파일을
그레이스케일로 읽어서 `img` 변수에 저장합니다.
`cv2.IMREAD_GRAYSCALE` 옵션을 사용하여 이미지를 흑백(그레이스케일)로 읽습니다.

2. `cv2.GaussianBlur(img, (5, 5), 0)`: `img`에 가우시안 블러를 적용하여 `dst1`에 저장합니다. 가우시안 블러는 이미지를 흐리게 만들기 위해
가우시안 커널을 적용하는데, `(5, 5)`는 커널의 크기를 (5, 5)로 설정하고, `0`은 가우시안 커널의 표준 편차를 의미합니다.

3. `cv2.bilateralFilter(img, 5, 80, 80)`: `img`에 바이레터럴 필터를 적용하여 `dst2`에 저장합니다. 바이레터럴 필터는 가우시안 블러와 유사하지만,
주변 픽셀들의 거리뿐만 아니라 밝기 차이도 고려하여 흐림 효과를 적용합니다. `(5, 5)`는 필터의 크기를 설정하고, `80`은 색상 공간에서의 시그마 값을 의미하며,
 `80`은 좌표 공간에서의 시그마 값을 의미합니다.

4. `cv2.imshow('img', img)`: `img` 이미지를 'img'라는 창에 표시합니다. 이 때, 'img' 창에는 원본 그레이스케일 이미지가 표시됩니다.

5. `cv2.imshow('dst1', dst1)`: `dst1` 이미지를 'dst1'라는 창에 표시합니다. 이 때, 'dst1' 창에는 가우시안 블러가 적용된 흐림 효과가 표시됩니다.

6. `cv2.imshow('dst2', dst2)`: `dst2` 이미지를 'dst2'라는 창에 표시합니다. 이 때, 'dst2' 창에는 바이레터럴 필터가 적용된 흐림 효과가 표시됩니다.

7. `cv2.waitKey()`: `cv2.imshow()` 함수로 보여진 이미지들이 화면에서 유지되도록 기다립니다. 아무 키나 누를 때까지 기다립니다.

코드 실행 결과를 해석하면:

1. `img`: 'gaussian_noise.jpg' 파일을 로드하여 원본 그레이스케일 이미지를 표시합니다.

2. `dst1`: 가우시안 블러가 적용된 이미지로, 이미지가 흐려지고 부드러워집니다. 가우시안 블러는 주로 노이즈를 감소시키고
이미지를 부드럽게 만들기 위해 사용됩니다.

3. `dst2`: 바이레터럴 필터가 적용된 이미지로, 가우시안 블러와는 다르게 이미지의 에지(경계)가 보존됩니다. 바이레터럴 필터는
노이즈 제거와 함께 이미지 선명도를 유지할 수 있는 필터로 사용됩니다.

이미지의 세 가지 버전을 통해 각각의 필터링 기법이 이미지에 어떤 영향을 미치는지 확인할 수 있습니다. 블러 필터는 이미지 처리에서
다양한 용도로 활용되며, 이미지에 원하는 효과를 부여하는데 유용합니다.