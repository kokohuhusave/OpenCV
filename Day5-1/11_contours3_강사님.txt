✅ GPT 설명

위의 코드는 이미지에서 다양한 도형을 인식하고 해당 도형에 대한 레이블을 이미지 상에 표시하는 예제입니다.

1. 이미지 읽기와 전처리:
   - `cv2.imread('./image/polygon.bmp')`: 'polygon.bmp'라는 이미지를 읽어옵니다.
   - `cv2.cvtColor(img, cv2.COLOR_BGRA2GRAY)`: 읽어온 이미지를 흑백 이미지로 변환합니다.
   - `cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)`: 흑백 이미지를 이진화합니다. 이진화된 이미지가
   `img_bin`에 저장됩니다.

2. 외곽선 검출:
   - `cv2.findContours(img_bin, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)`: 이진화된 이미지에서 외곽선을 검출합니다. `contours`에
   검출된 외곽선들의 리스트가 저장됩니다.

3. 도형 분류와 레이블링:
   - `for pts in contours:`
     - 각각의 외곽선 `pts`에 대해 아래 과정을 수행합니다.
   - `cv2.contourArea(pts)`: 외곽선의 면적을 계산합니다.
   - `cv2.approxPolyDP(pts, cv2.arcLength(pts, True) * 0.02, True)`: 외곽선을 근사화하여 다각형 형태를 더 적은 점으로 근사화합니다.
   `approx`에 근사화된 결과가 저장됩니다.
   - `len(approx)`: 근사화된 다각형의 꼭지점 수를 계산합니다.
   - 꼭지점 수에 따라 객체를 삼각형, 사각형 또는 원으로 분류하고, `cv2.rectangle()` 함수로 객체 영역을 감싸고, `cv2.putText()` 함수로 레이블을 표시합니다.
   - 객체 영역은 `cv2.boundingRect()` 함수를 사용하여 경계 사각형으로 둘러싸고, 레이블은 해당 사각형의 좌상단에 표시됩니다.
   - 레이블 이름은 'TRI' (삼각형), 'RECT' (사각형), 'CIR' (원), 'NONAME' (위 모양에 해당하지 않는 도형) 중 하나로 표시됩니다.

4. 결과 확인:
   - `cv2.imshow('img', img)`: 레이블이 표시된 이미지를 화면에 표시합니다.
   - `cv2.waitKey()`: 사용자의 키 입력을 기다립니다.

이 코드는 이미지에 포함된 도형들을 인식하고, 삼각형, 사각형, 원으로 분류하여 해당 도형의 레이블을 이미지에 표시하는 간단한 예제입니다.
주석 처리된 부분을 통해 이미지 전처리과정인 이진화 또는 이진화된 이미지를 확인하고 싶다면 해당 코드 부분의 주석을 해제하고 실행하면 됩니다.